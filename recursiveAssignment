Write a recursive function (for/while loops not allowed) that given a sorted array and a value, determines whether the value is found within the array.

For example:
rBinarySearch([1,3,5,6], 4) = false;
rBinarySearch([4,5,6,8,12], 5) = true;

Reminder, there are 3 requirements for effective recursion:
They have base case(s)
They always make a progress towards the goal
Calls back into itself



var sortedArray = [1, 2, 3, 4, 5];
var inOrNot = 9;

function isValueInArray(sortedArray, inOrNot) {

if(sortedArray[] != inOrNot {
return ;
  }
}

isValueInArray(sortedArray, inOrNot);

===============

var sortedArray = [1, 2, 3, 4, 5];
var inOrNot = 9;

function isValueInArray(sortedArray, inOrNot) {

if(sortedArray[] != inOrNot) {
return true;
  }
return isValueInArray(sortedArray;
}

isValueInArray(sortedArray, inOrNot);

==============

var sortedArray = [1, 2, 3, 4, 5];
var value = 9;

function isValueInArray(sortedArray, value) {

if(sortedArray < 0) {
return 0;
}

return sortedArray - isValueInArray(sortedArray-1);
}

isValueInArray(sortedArray, value);

==============

var sortedArray = [1, 2, 3, 4, 5];

function isValueInArray(sortedArray) {

if(sortedArray.length < 1 ){

return sortedArray;
}

return sortedArray + isValueInArray(sortedArray[0+1]);
}

isValueInArray(sortedArray);

==============

Final Attempt!!!!

var sortedArray = [1, 2, 3, 4, 5];

function isValueInArray(sortedArray) {

if(sortedArray.length > 1) {
return sortedArray + isValueInArray(sortedArray[0+1]);

}

}

isValueInArray(sortedArray);

var sortedArray = [1, 2, 3, 4, 5];
var emptyArray = [];
function isValueInArray(sortedArray, emptyArray) {

if(sortedArray.length < 1) {
return sortedArray;
}
else {
  var index = sortedArray + isValueInArray(sortedArray[0+1]);
  return emptyArray.push(index);
}
}

isValueInArray(sortedArray, emptyArray);
==============

Now to find the value

var sortedArray = [1, 2, 3, 4, 5];
var input = 9;

function isValueInArray(sortedArray,input) {

if(sortedArray.length < 1) {
return sortedArray;
}
else {


return index = sortedArray + isValueInArray(sortedArray[0+1]);
sortedArray.push(index);
}
if(input == index) {
return true;
}
else {
return false;
}

}
isValueInArray(sortedArray,input);


==============

Now to Solve - Addis Attempt

var arr = [3, 10, 36, 57, 90];
var x = 10;

function findX(arr,x) {

if(arr.length < 1 && arr[0] != x) {
return false;
}
else {

var mid = (arr.length -1 / 2);
var front = 0;
var end = arr.length-1;

return index = arr + findX(front++, x);
arr.push(index);
}
if(x == index) {
return true;
}
else {
return false;
}

}
isValueInArray(arr,x);



==========================

Answer

var arr = [3, 10, 45, 78, 102, 234, 567];
var front = arr[0];
var end = arr[arr.length-1];
var x = 102;

function findX(arr,x, front,end) {

if(front > end) {
return false;
}

if(front <= end) {
var mid = (arr.length/ 2);

arr[mid] == x) {
  return mid;
}

if(arr[mid] > x) {
 findX(arr, front, mid-1, x);
}
else{
  return
}
}
findX(arr,x,front,end);

function findMe(num,set){
if(num<set[0]||num>set[set.length-1]){
  console.log('not even in range');
  return;
}
function search(num,set){
  var check=Math.ceil((last-start)/2);
  if(check==0){
    console.log('not here');
    return false
  }
  if(num>set[start+check]){
      start=start+check;
      console.log('gotta recurse');
      search(num,set)
    }
  else if(num<set[start+check]){
    last=last-check;
    console.log('gotta recurse');
    search(num,set)
  }
  else{
    console.log('im here')
    return true;
  }
}

var start=0;
var last=set.length-1;
search(num,set)
}

test=[0,2,6,8,10,16,20,32,90];
findMe(1,test)


==========================================

var arr = [3, 9, 17, 29, 45];
var val = 9;
var start = 0; //index not value
var end = arr.length-1;//4 //index not value

function rBinSearch(arr, val, start, end) {
  if(start >= end || val < arr[start] || val > arr[end] {
    return false;
}

  var mid = parseInt(start + end)/2); //this gives us index #2
  if(arr[mid] === val){ //if 17 equal equal to val
    return true;
}

  if(arr[mid] > val) {
    end = mid; //array sub[4] is now array sub[2]
}

  else {
      start = mid + 1;
}

return rBinSearch(arr, val, start, end);

}



 
















































f > b